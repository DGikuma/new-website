{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///D:/New_Website/birdview-website/app/products/evacuation_and_repatriation/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n    Button,\r\n    Input,\r\n    Select,\r\n    SelectItem,\r\n    Table,\r\n    TableHeader,\r\n    TableColumn,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Card,\r\n    CardBody,\r\n    Modal,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    useDisclosure,\r\n} from \"@heroui/react\";\r\nimport { Eye, Shield } from \"lucide-react\";\r\n\r\nimport AnimatedNumber from \"@/components/AnimatedNumber\";\r\n\r\nconst EvacAndRepatriation = () => {\r\n    const [currency, setCurrency] = useState(\"KES\");\r\n    const [exchangeRates, setExchangeRates] = useState<Record<string, number>>({});\r\n    const [selectedPlan, setSelectedPlan] = useState<any>(null);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n    const currencySymbols: Record<string, string> = {\r\n        USD: \"$\",\r\n        KES: \"KSh\",\r\n        EUR: \"€\",\r\n        GBP: \"£\",\r\n    };\r\n\r\n    const insurancePlans = [\r\n        { plan: \"Plan 1\", limit: 100000, premium: 3500 },\r\n        { plan: \"Plan 2\", limit: 200000, premium: 7000 },\r\n        { plan: \"Plan 3\", limit: 300000, premium: 10500 },\r\n        { plan: \"Plan 4\", limit: 500000, premium: 14400 },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const fetchExchangeRates = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    \"https://snownet-customer-quotation-server.onrender.com/api/underwriting/quotation/onlineQuotation/products/exchangeRate/\"\r\n                );\r\n                const ratesMap: Record<string, number> = {};\r\n                for (let item of response.data?.data || []) {\r\n                    if (item.currency && item.x_rate) {\r\n                        ratesMap[item.currency] = parseFloat(item.x_rate);\r\n                    }\r\n                }\r\n                setExchangeRates(ratesMap);\r\n            } catch (error) {\r\n                console.error(\"❌ Failed to fetch exchange rates:\", error);\r\n            }\r\n        };\r\n        fetchExchangeRates();\r\n    }, []);\r\n\r\n    const handleOpenDialog = (plan: any) => {\r\n        setSelectedPlan(plan);\r\n        onOpen();\r\n    };\r\n\r\n    const handleClickEvacAndRepatriation = () => {\r\n        window.location.href = \"https://quote.birdviewinsurance.com/?ProductID=1\";\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative bg-gradient-to-br from-gray-50 via-blue-50 to-white py-12 px-4\">\r\n            <div className=\"max-w-6xl mx-auto bg-white p-6 md:p-10 rounded-3xl shadow-xl border border-gray-200\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\r\n                    {/* Left Content */}\r\n                    <Card shadow=\"sm\" className=\"border border-gray-100\">\r\n                        <CardBody>\r\n                            <h2 className=\"text-2xl font-semibold text-blue-600 mb-2\">\r\n                                Evacuation and Repatriation\r\n                            </h2>\r\n                            <p className=\"text-gray-600 mb-5\">\r\n                                Our worldwide evacuation and repatriation cover is crafted to\r\n                                intervene and rescue situations of citizens being either\r\n                                stranded or deceased abroad. This removes the financial burden\r\n                                of evacuations and/or body repatriations from the government and\r\n                                affected families.\r\n                            </p>\r\n                            <div className=\"bg-blue-50 p-4 rounded-xl border border-blue-200 shadow-sm\">\r\n                                <h3 className=\"text-xl font-bold text-blue-600 mb-3\">\r\n                                    Benefit Summary:\r\n                                </h3>\r\n                                <ul className=\"space-y-3 text-gray-700 list-disc pl-5\">\r\n                                    <li>\r\n                                        <strong>Evacuation on Medical Emergency:</strong> Cash payout{\" \"}\r\n                                        <span className=\"text-blue-600 font-bold\">25%</span> of\r\n                                        benefit upon evacuation.\r\n                                    </li>\r\n                                    <li>\r\n                                        <strong>Force Return/Deportation:</strong> Cash payout{\" \"}\r\n                                        <span className=\"text-blue-600 font-bold\">50%</span> of\r\n                                        benefit.\r\n                                    </li>\r\n                                    <li>\r\n                                        <strong>Repatriation in the Event of Demise:</strong> Pay{\" \"}\r\n                                        <span className=\"text-blue-600 font-bold\">100%</span> of\r\n                                        benefit to the next of kin/nominated beneficiary.\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </CardBody>\r\n                    </Card>\r\n\r\n                    {/* Right Pricing Table */}\r\n                    <Card shadow=\"sm\" className=\"border border-gray-100\">\r\n                        <CardBody>\r\n                            <Select\r\n                                label=\"Select Currency\"\r\n                                selectedKeys={[currency]}\r\n                                onChange={(e) => setCurrency(e.target.value)}\r\n                                className=\"mb-4\"\r\n                            >\r\n                                {[\"KES\", \"USD\", \"EUR\", \"GBP\"].map((cur) => (\r\n                                    <SelectItem key={cur}>{cur}</SelectItem>\r\n                                ))}\r\n                            </Select>\r\n\r\n                            {/* Desktop Table */}\r\n                            <div className=\"hidden md:block\">\r\n                                <Table aria-label=\"Pricing Table\" isStriped removeWrapper>\r\n                                    <TableHeader>\r\n                                        <TableColumn className=\"bg-blue-600 text-white text-center\">\r\n                                            Plan\r\n                                        </TableColumn>\r\n                                        <TableColumn className=\"bg-blue-600 text-white text-center\">\r\n                                            Benefit Cover\r\n                                        </TableColumn>\r\n                                        <TableColumn className=\"bg-blue-600 text-white text-center\">\r\n                                            Premium\r\n                                        </TableColumn>\r\n                                    </TableHeader>\r\n                                    <TableBody>\r\n                                        {insurancePlans.map((plan, idx) => (\r\n                                            <TableRow\r\n                                                key={idx}\r\n                                                className=\"cursor-pointer hover:bg-blue-50\"\r\n                                                onClick={() => handleOpenDialog(plan)}\r\n                                            >\r\n                                                <TableCell className=\"text-center\">\r\n                                                    <Button\r\n                                                        size=\"sm\"\r\n                                                        color=\"primary\"\r\n                                                        radius=\"sm\"\r\n                                                        endContent={<Eye size={16} />}\r\n                                                    >\r\n                                                        {plan.plan}\r\n                                                    </Button>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"text-center\">\r\n                                                    <AnimatedNumber\r\n                                                        value={\r\n                                                            Number(plan.limit) * (exchangeRates[currency] || 1)\r\n                                                        }\r\n                                                        prefix={currencySymbols[currency]}\r\n                                                        color=\"text-blue-600\"\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell className=\"text-center\">\r\n                                                    <AnimatedNumber\r\n                                                        value={\r\n                                                            Number(plan.premium) *\r\n                                                            (exchangeRates[currency] || 1)\r\n                                                        }\r\n                                                        prefix={currencySymbols[currency]}\r\n                                                        color=\"text-green-600\"\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </div>\r\n\r\n                            {/* Mobile Cards */}\r\n                            <div className=\"grid gap-4 md:hidden\">\r\n                                {insurancePlans.map((plan, idx) => (\r\n                                    <Card\r\n                                        key={idx}\r\n                                        shadow=\"sm\"\r\n                                        className=\"border border-gray-200 cursor-pointer hover:shadow-md\"\r\n                                        onClick={() => handleOpenDialog(plan)}\r\n                                    >\r\n                                        <CardBody>\r\n                                            <h3 className=\"text-lg font-semibold\">{plan.plan}</h3>\r\n                                            <p className=\"text-blue-600 text-sm\">\r\n                                                Benefit Cover:{\" \"}\r\n                                                <AnimatedNumber\r\n                                                    value={\r\n                                                        Number(plan.limit) * (exchangeRates[currency] || 1)\r\n                                                    }\r\n                                                    prefix={currencySymbols[currency]}\r\n                                                    color=\"text-blue-600\"\r\n                                                />\r\n                                            </p>\r\n                                            <p className=\"text-green-600 text-sm\">\r\n                                                Premium:{\" \"}\r\n                                                <AnimatedNumber\r\n                                                    value={\r\n                                                        Number(plan.premium) *\r\n                                                        (exchangeRates[currency] || 1)\r\n                                                    }\r\n                                                    prefix={currencySymbols[currency]}\r\n                                                    color=\"text-green-600\"\r\n                                                />\r\n                                            </p>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                ))}\r\n                            </div>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n\r\n                {/* CTA */}\r\n                <div className=\"text-center\">\r\n                    <p className=\"text-lg font-semibold text-gray-700 mb-2\">\r\n                        Ready to take the next step?\r\n                    </p>\r\n                    <Button\r\n                        size=\"lg\"\r\n                        color=\"danger\"\r\n                        radius=\"full\"\r\n                        className=\"font-bold shadow-md\"\r\n                        endContent={<Shield size={20} />}\r\n                        onClick={handleClickEvacAndRepatriation}\r\n                    >\r\n                        Get Quote\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Modal */}\r\n            <Modal isOpen={isOpen} onClose={onClose} size=\"lg\" backdrop=\"blur\">\r\n                <ModalContent>\r\n                    {() => (\r\n                        <>\r\n                            <ModalHeader className=\"bg-blue-800 text-white\">\r\n                                {selectedPlan?.plan} Details\r\n                            </ModalHeader>\r\n                            <ModalBody>\r\n                                {selectedPlan &&\r\n                                    Object.entries(selectedPlan).map(\r\n                                        ([key, value]) =>\r\n                                            key !== \"plan\" && (\r\n                                                <div\r\n                                                    key={key}\r\n                                                    className=\"flex justify-between py-2 border-b border-gray-200 text-sm\"\r\n                                                >\r\n                                                    <span className=\"font-medium capitalize text-gray-700\">\r\n                                                        {key}\r\n                                                    </span>\r\n                                                    <span className=\"text-gray-900\">\r\n                                                        <AnimatedNumber\r\n                                                            value={\r\n                                                                Number(value) * (exchangeRates[currency] || 1)\r\n                                                            }\r\n                                                            prefix={currencySymbols[currency]}\r\n                                                            color=\"text-gray-800\"\r\n                                                        />\r\n                                                    </span>\r\n                                                </div>\r\n                                            )\r\n                                    )}\r\n                            </ModalBody>\r\n                            <ModalFooter>\r\n                                <Button color=\"danger\" variant=\"light\" onPress={onClose}>\r\n                                    Close\r\n                                </Button>\r\n                            </ModalFooter>\r\n                        </>\r\n                    )}\r\n                </ModalContent>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EvacAndRepatriation;\r\n"],"names":[],"mappings":"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","debugId":null}}]
}